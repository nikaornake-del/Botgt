import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
import sqlite3

# ============= –ù–ê–°–¢–†–û–ô–ö–ò (–ó–ê–ú–ï–ù–ò–¢–¨!) =============
BOT_TOKEN = "8488749521:AAHqJYO0TzuXUmKoZiW7o_Y1eNi2CKV0BfI"  # ‚Üê –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù –û–¢ @BotFather
ADMIN_ID = 7773148577  # ‚Üê –í–°–¢–ê–í–¨ –°–í–û–ô TELEGRAM ID (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot)
# ==================================================

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# === FSM –¥–ª—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏ ===
class NewsStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()
    broadcast_message = State()

# === –†–∞–±–æ—Ç–∞ —Å –ë–î (SQLite) ===
def init_db():
    with sqlite3.connect("bot.db") as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT
            )
        """)
        conn.commit()

def add_user(user_id: int, username: str, full_name: str):
    with sqlite3.connect("bot.db") as conn:
        conn.execute(
            "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
            (user_id, username, full_name)
        )
        conn.commit()

def get_all_user_ids():
    with sqlite3.connect("bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        return [row[0] for row in cursor.fetchall()]

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_start_keyboard(user_id: int):
    buttons = [[KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")]]
    if user_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=False)

def get_news_type_keyboard():
    buttons = [
        [KeyboardButton(text="–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")],
        [KeyboardButton(text="–¢–µ–∫—Å—Ç + –ö–∞—Ä—Ç–∏–Ω–∫–∞")],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª) ===
START_MESSAGE = """–ü—Ä–∏–≤–µ—Ç,

–°—é–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ª—é–±—É—é –Ω–æ–≤–æ—Å—Ç—å: —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –≤—Å–µ —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∫–∏–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!
üíÅüèª‚Äç‚ôÇÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ."""

# === –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
def format_news_for_admin(user_data, text: str = None, has_photo: bool = False):
    username = user_data['username']
    full_name = user_data['full_name']
    user_id = user_data['user_id']

    # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username:
        user_link = f'<a href="https://t.me/{username}">@{username}</a>'
    else:
        user_link = f'<a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

    header = "üì¨ <b>–ù–æ–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>"
    divider = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    user_info = f"üë§ <b>–û—Ç:</b> {user_link} (<code>{user_id}</code>)"
    if full_name:
        user_info += f" | <i>{full_name}</i>"

    news_text = f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{i(text)}" if text else "üìù <b>–¢–µ–∫—Å—Ç:</b> (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    media_info = "üñºÔ∏è <b>–§–æ—Ç–æ:</b> –î–∞" if has_photo else "üñºÔ∏è <b>–§–æ—Ç–æ:</b> –ù–µ—Ç"

    return (
        f"{header}\n"
        f"{divider}\n"
        f"{user_info}\n"
        f"{divider}\n"
        f"{news_text}\n"
        f"{divider}\n"
        f"{media_info}\n"
        f"üîö <i>–ö–æ–Ω–µ—Ü –Ω–æ–≤–æ—Å—Ç–∏</i>"
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    add_user(user_id, username, full_name)
    await message.answer(
        START_MESSAGE,
        reply_markup=get_start_keyboard(user_id)
    )

@dp.message(F.text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def propose_news(message: Message, state: FSMContext):
    await state.set_state(NewsStates.waiting_for_text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ—Å—Ç–∏:",
        reply_markup=get_news_type_keyboard()
    )

@dp.message(F.text == "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
async def text_only(message: Message, state: FSMContext):
    await state.update_data(news_type="text_only")
    await state.set_state(NewsStates.waiting_for_text)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–π –Ω–æ–≤–æ—Å—Ç–∏.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å <b>–∞–¥—Ä–µ—Å</b>!",
        reply_markup=None
    )

@dp.message(F.text == "–¢–µ–∫—Å—Ç + –ö–∞—Ä—Ç–∏–Ω–∫–∞")
async def text_and_photo(message: Message, state: FSMContext):
    await state.update_data(news_type="text_photo")
    await state.set_state(NewsStates.waiting_for_text)
    await message.answer(
        "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> —Å–≤–æ–µ–π –Ω–æ–≤–æ—Å—Ç–∏.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å <b>–∞–¥—Ä–µ—Å</b>!",
        reply_markup=None
    )

@dp.message(NewsStates.waiting_for_text, F.text)
async def get_news_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    news_type = data.get("news_type")

    if news_type == "text_only":
        user_data = {
            "user_id": message.from_user.id,
            "username": message.from_user.username,
            "full_name": message.from_user.full_name,
        }
        admin_message = format_news_for_admin(user_data, text=message.text, has_photo=False)
        await bot.send_message(ADMIN_ID, admin_message)
        await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥.")
        await state.clear()
    elif news_type == "text_photo":
        await state.set_state(NewsStates.waiting_for_photo)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b> –∫ –Ω–æ–≤–æ—Å—Ç–∏.")

@dp.message(NewsStates.waiting_for_text)
async def invalid_text(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.")

@dp.message(NewsStates.waiting_for_photo, F.photo)
async def get_news_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "(—Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    photo_id = message.photo[-1].file_id

    user_data = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "full_name": message.from_user.full_name,
    }

    admin_message = format_news_for_admin(user_data, text=text, has_photo=True)
    await bot.send_message(ADMIN_ID, admin_message)
    await bot.send_photo(ADMIN_ID, photo_id)

    await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
    await state.clear()

@dp.message(NewsStates.waiting_for_photo)
async def invalid_photo(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b>.")

@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ")
async def start_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(NewsStates.broadcast_message)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@dp.message(NewsStates.broadcast_message)
async def broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    user_ids = get_all_user_ids()
    sent = 0
    failed = 0

    status_msg = await message.answer("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")

    for user_id in user_ids:
        try:
            if message.photo:
                await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
            elif message.text:
                await bot.send_message(user_id, message.text)
            elif message.video:
                await bot.send_video(user_id, message.video.file_id, caption=message.caption)
            elif message.document:
                await bot.send_document(user_id, message.document.file_id, caption=message.caption)
            else:
                await bot.send_message(user_id, "üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            sent += 1
        except Exception:
            failed += 1
        await asyncio.sleep(0.05)

    await status_msg.edit_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")
    await state.clear()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
